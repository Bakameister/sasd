import mongoose from 'mongoose';
import { config } from 'dotenv';

config();

export async function connectToDatabase() {
  try {
    console.log('üîÑ Conectando a la base de datos MongoDB...');
    
    // Verificar si la URI de MongoDB est√° definida
    if (!process.env.MONGODB_URI) {
      console.warn('‚ö†Ô∏è MONGODB_URI no est√° definida en el archivo .env');
      console.warn('‚ö†Ô∏è Las funcionalidades de base de datos estar√°n desactivadas');
      return false;
    }

    
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conexi√≥n a MongoDB establecida correctamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error al conectar a MongoDB:', error);
    console.warn('‚ö†Ô∏è Las funcionalidades de base de datos estar√°n desactivadas');
    return false;
  }
}

// Funci√≥n para generar un ID √∫nico para cada usuario
export async function generateUniqueUserId() {
  try {
    // Verificar si la conexi√≥n a MongoDB est√° activa
    if (mongoose.connection.readyState !== 1) {
      console.warn('‚ö†Ô∏è No hay conexi√≥n a MongoDB, generando ID aleatorio');
      return Math.floor(1 + Math.random() * 100);
    }
    
    // Importar el modelo de usuario
    const User = mongoose.models.User;
    
    // Encontrar el √∫ltimo ID asignado
    const lastUser = await User.findOne().sort({ userId: -1 });
    
    // Si no hay usuarios, comenzar desde 1
    // Si hay usuarios, incrementar el √∫ltimo ID en 1
    return lastUser ? lastUser.userId + 1 : 1;
  } catch (error) {
    console.error('‚ùå Error al generar ID √∫nico:', error);
    return Math.floor(1 + Math.random() * 100); // Fallback a un n√∫mero aleatorio
  }
}

// Funci√≥n para formatear nombres (primera letra may√∫scula, resto min√∫scula)
export function formatName(name) {
  if (!name) return '';
  return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
}

// Funci√≥n para validar que un texto solo contenga letras
export function containsOnlyLetters(text) {
  return /^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë\s]+$/.test(text);
}